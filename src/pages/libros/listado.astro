---
import { LibroRepositorySupabase } from "@adapters/out/db/LibroRepositorySupabase";

const repo = new LibroRepositorySupabase();
const libros = await repo.findAll();
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Listado de Libros</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/src/styles/global.css" />
  </head>

  <body
    class="min-h-screen bg-gradient-to-br from-purple-100 via-white to-purple-200 p-8"
  >
    <main class="max-w-6xl mx-auto bg-white shadow-xl rounded-xl p-8">
      <h1 class="text-3xl font-bold mb-6 text-purple-700 text-center">
        üìö Listado de Libros
      </h1>

      <table
        class="min-w-full table-auto border-collapse border border-gray-300"
      >
        <thead class="bg-purple-100">
          <tr>
            <th class="border border-gray-300 px-4 py-2">Nombre</th>
            <th class="border border-gray-300 px-4 py-2">Descripci√≥n</th>
            <th class="border border-gray-300 px-4 py-2">Categor√≠a</th>
            <th class="border border-gray-300 px-4 py-2">Autor</th>
            <th class="border border-gray-300 px-4 py-2">Publicado</th>
            <th class="border border-gray-300 px-4 py-2">Costo</th>
            <th class="border border-gray-300 px-4 py-2">Acciones</th>
          </tr>
        </thead>
        <tbody>
          {
            libros.map((libro) => (
              <tr class="hover:bg-gray-100" data-id={libro.id}>
                <td class="border px-4 py-2">{libro.name}</td>
                <td class="border px-4 py-2">{libro.descripcion}</td>
                <td class="border px-4 py-2">{libro.categoria}</td>
                <td class="border px-4 py-2">{libro.author}</td>
                <td class="border px-4 py-2">
                  {libro.datePublish.toLocaleDateString()}
                </td>
                <td class="border px-4 py-2">Q{libro.cost}</td>
                <td class="border px-4 py-2 space-x-2">
                  <button class="bg-yellow-400 text-white px-3 py-1 rounded hover:bg-yellow-500">
                    Editar
                  </button>
                  <button class="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600">
                    Eliminar
                  </button>
                </td>
              </tr>
            ))
          }
        </tbody>
      </table>

      <div class="mt-6 text-center">
        <a href="/libros" class="text-purple-600 hover:underline">
          ‚Üê Volver al formulario
        </a>
      </div>
    </main>

    <script type="module">
      const deleteButtons = document.querySelectorAll("button.bg-red-500");

      deleteButtons.forEach((btn) => {
        btn.addEventListener("click", async () => {
          const row = btn.closest("tr");
          const id = row?.dataset?.id;

          if (confirm("¬øSeguro que quer√©s eliminar este libro?")) {
            const res = await fetch(`/api/libros/${id}`, {
              method: "DELETE",
            });

            const result = await res.json();
            if (result.success) {
              alert("üìï Libro eliminado correctamente");
              row.remove();
            } else {
              alert("‚ùå Error al eliminar el libro");
            }
          }
        });
      });

      const editButtons = document.querySelectorAll("button.bg-yellow-400");

      editButtons.forEach((btn) => {
        btn.addEventListener("click", async () => {
          const row = btn.closest("tr");
          const id = row?.dataset?.id;

          const name = prompt("Nuevo nombre:", row.children[0].textContent);
          const description = prompt(
            "Nueva descripci√≥n:",
            row.children[1].textContent
          );
          const categoria = prompt(
            "Nueva categor√≠a:",
            row.children[2].textContent
          );
          const author = prompt("Nuevo autor:", row.children[3].textContent);
          const date_publish = prompt(
            "Nueva fecha de publicaci√≥n (YYYY-MM-DD):",
            row.children[4].textContent
          );
          const costo = prompt(
            "Nuevo costo:",
            row.children[5].textContent.replace("Q", "")
          );

          if (
            !name ||
            !description ||
            !categoria ||
            !author ||
            !date_publish ||
            !costo
          ) {
            alert("‚ùå Todos los campos son requeridos");
            return;
          }

          const res = await fetch(`/api/libros/${id}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name,
              description,
              categoria,
              author,
              date_publish,
              costo,
            }),
          });

          const result = await res.json();
          if (result.success) {
            alert("‚úèÔ∏è Libro actualizado correctamente");
            location.reload();
          } else {
            alert("‚ùå Hubo un error al actualizar el libro");
            console.error(result.error);
          }
        });
      });
    </script>
  </body>
</html>
